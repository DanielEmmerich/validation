Constraints:
// S0: Train is in standstill & Mode is FS, LS, OS, SR, PT, SN, UN or SB


Types:
enum{'init','a100','a030','a045','a220','a095','d080','end'} states;


Declarations:
bool a030_state;
bool a045_state;
bool a050_state;
bool a220_state;
bool a100_state;
bool a095_state;
bool a115_state;
bool all_false_state;

states current_state;
states last_state;
states e015;
states d020;
states a050;
states s050;
states a045;
states d030;
states d040;
states d080;


/*
enum{'Level_And_Mode_Types_Pkg::L0','Level_And_Mode_Types_Pkg::L1','Level_And_Mode_Types_Pkg::L2','Level_And_Mode_Types_Pkg::L3','Level_And_Mode_Types_Pkg::LNTC'} 'Level_And_Mode_Types_Pkg::T_Level';

Inputs:
'Level_And_Mode_Types_Pkg::T_Level' Current_Level;
bool Driver_Req_SH;
bool On_Going_Mission;
bool Shunting_Granted_By_RBC;
*/

Definitions:
a030_state := True; // Process go to the "Train Trip" procedure (???)
a045_state := Request_For_SH_To_RBC;
a050_state := (Condition5 # Condition6) & Clean_BG_List_SH_Area;
a220_state := SH_Refused_By_RBC_To_DMI;
a100_state := End_Of_Mission_Procedure_Req == On_Going_Mission; // /!\ Contrainte à vérifier à un noeud supérieur (= top node)
a095_state := True; // mode change shall be reported to the RBC (???)
a115_state := True; // Terminate session (???)
all_false_state := ~Clean_BG_List_SH_Area &
		   ~Condition5 &
		   ~Condition6 &
		   ~End_Of_Mission_Procedure_Req &
		   ~SH_Refused_By_RBC_To_DMI &
		   ~Request_For_SH_To_RBC;


last_state := pre(current_state,'init');
current_state := (last_state
	      	 | 'init' => e015
	      	 | 'a100' => 'a100'
		 | 'a045' => s050
		 | 'a220' => 'a220'
		 | 'a030' => 'a030' // /!\ Apparement non modélisé dans le modèle Scade SH_Initiated_By_Driver_On ?
		 | 'd080' => 'd080'
		 | 'a095' => 'a095' // /!\ Non modélisé dans le modèle Scade SH_Initiated_By_Driver_On
		 | 'end' => 'end'
		 );

e015 := if (Driver_Req_SH) then
     	d020
	else
	'init';

d020 := if (Current_Level == 'Level_And_Mode_Types_Pkg::LNTC') then
	d030
	elif ((Current_Level == 'Level_And_Mode_Types_Pkg::L0' # 
	Current_Level == 'Level_And_Mode_Types_Pkg::L1')) then
	a050
	else // (Current_Level == 'Level_And_Mode_Types_Pkg::L2' # Current_Level == 'Level_And_Mode_Types_Pkg::L3')
	'a045';


d030 := if (On_Going_Mission) then
     	'a030'
	else
	a050;


a050 := d040;

d040 := if On_Going_Mission then
     	'a100'
	else
	d080;

d080 := if (Current_Level == 'Level_And_Mode_Types_Pkg::L0' # 
	Current_Level == 'Level_And_Mode_Types_Pkg::L1' #
	Current_Level == 'Level_And_Mode_Types_Pkg::LNTC') then
	'd080'
	else // (Current_Level == 'Level_And_Mode_Types_Pkg::L2' # Current_Level == 'Level_And_Mode_Types_Pkg::L3')
	'a095';

s050 := if (Shunting_Granted_By_RBC) then
	a050
	else
	'a220';


Proof Obligations:
(current_state == 'init') -> all_false_state;
(current_state == 'a100') -> (a050_state & a100_state);
(current_state == 'a045') -> a045_state;
(current_state == 'a220') -> a220_state;
(current_state == 'a095') -> a050_state; // /!\ Est-ce que End_Of_Mission_Procedure_Req doit être à False ?
(current_state == 'd080') -> a050_state; // /!\ Est-ce que End_Of_Mission_Procedure_Req doit être à False ?